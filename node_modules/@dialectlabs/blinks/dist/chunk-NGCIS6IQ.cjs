"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/ui/Blink.tsx


var _blinkscore = require('@dialectlabs/blinks-core');
var _react = require('react');

// src/ui/internal/hooks/useLayoutPropNormalizer.tsx










// src/ui/internal/hooks/ui-mappers.ts
var buttonVariantMap = {
  "checking-supportability": "default",
  blocked: "default",
  idle: "default",
  executing: "default",
  success: "success",
  error: "error"
};
var buttonLabelMap = {
  "checking-supportability": "Loading",
  blocked: null,
  idle: null,
  executing: "Executing",
  success: "Completed",
  error: "Failed"
};

// src/ui/internal/hooks/useLayoutPropNormalizer.tsx
var SOFT_LIMIT_BUTTONS = 10;
var SOFT_LIMIT_INPUTS = 3;
var SOFT_LIMIT_FORM_INPUTS = 10;
var useLayoutPropNormalizer = ({
  executeFn,
  executionStatus,
  executingAction,
  action,
  caption,
  ...props
}) => {
  const buttons = _react.useMemo.call(void 0, 
    () => _nullishCoalesce(_optionalChain([action, 'optionalAccess', _ => _.actions, 'access', _2 => _2.filter, 'call', _3 => _3((it) => it instanceof _blinkscore.ButtonActionComponent), 'access', _4 => _4.filter, 'call', _5 => _5((it) => executingAction ? executingAction === it : true), 'access', _6 => _6.toSpliced, 'call', _7 => _7(SOFT_LIMIT_BUTTONS)]), () => ( [])),
    [action, executingAction]
  );
  const inputs = _react.useMemo.call(void 0, 
    () => _nullishCoalesce(_optionalChain([action, 'optionalAccess', _8 => _8.actions, 'access', _9 => _9.filter, 'call', _10 => _10(
      (it) => it instanceof _blinkscore.SingleValueActionComponent || it instanceof _blinkscore.MultiValueActionComponent
    ), 'access', _11 => _11.filter, 'call', _12 => _12((it) => executingAction ? executingAction === it : true), 'access', _13 => _13.toSpliced, 'call', _14 => _14(SOFT_LIMIT_INPUTS)]), () => ( [])),
    [action, executingAction]
  );
  const form = _react.useMemo.call(void 0, () => {
    const [formComponent] = _nullishCoalesce(_optionalChain([action, 'optionalAccess', _15 => _15.actions, 'access', _16 => _16.filter, 'call', _17 => _17((it) => it instanceof _blinkscore.FormActionComponent), 'access', _18 => _18.filter, 'call', _19 => _19((it) => executingAction ? executingAction === it : true)]), () => ( []));
    return formComponent;
  }, [action, executingAction]);
  const asButtonProps = (it) => {
    return {
      text: _nullishCoalesce(buttonLabelMap[executionStatus], () => ( it.label)),
      loading: executionStatus === "executing" && it === executingAction,
      disabled: action.disabled || action.type === "completed" || executionStatus !== "idle",
      variant: buttonVariantMap[action.type === "completed" ? "success" : executionStatus],
      ctaType: it.type === "external-link" && (executionStatus === "idle" || executionStatus === "blocked") ? "link" : "button",
      onClick: async (params) => {
        const extra = await executeFn(_nullishCoalesce(it.parentComponent, () => ( it)), params);
        if (!extra) {
          return;
        }
        if (extra.type === "external-link") {
          const result = window.confirm(
            `This action redirects to another website: ${extra.data.externalLink}, the link will open in a new tab of your browser`
          );
          if (result) {
            window.open(
              extra.data.externalLink,
              "_blank",
              "norefferer,noopener"
            );
            return extra.onNext();
          }
          return _optionalChain([extra, 'access', _20 => _20.onCancel, 'optionalCall', _21 => _21()]);
        }
      }
    };
  };
  const asInputProps = (it, { placement } = {
    placement: "standalone"
  }) => {
    return {
      type: _nullishCoalesce(it.parameter.type, () => ( "text")),
      placeholder: it.parameter.label,
      disabled: action.disabled || action.type === "completed" || executionStatus !== "idle",
      name: it.parameter.name,
      required: it.parameter.required,
      min: it.parameter.min,
      max: it.parameter.max,
      pattern: it instanceof _blinkscore.SingleValueActionComponent && _blinkscore.isPatternAllowed.call(void 0, it.parameter) ? it.parameter.pattern : void 0,
      options: _blinkscore.isParameterSelectable.call(void 0, it.parameter) ? it.parameter.options : void 0,
      description: it.parameter.patternDescription,
      button: placement === "standalone" ? asButtonProps(it.toButtonActionComponent()) : void 0
    };
  };
  const asFormProps = (it) => {
    return {
      button: asButtonProps(it.toButtonActionComponent()),
      inputs: it.parameters.toSpliced(SOFT_LIMIT_FORM_INPUTS).map(
        (parameter) => asInputProps(it.toInputActionComponent(parameter.name), {
          placement: "form"
        })
      )
    };
  };
  const normalizedCaption = _react.useMemo.call(void 0, () => {
    if (!caption) {
      return {};
    }
    if (caption.type === "success") {
      return {
        success: caption.text
      };
    }
    if (caption.type === "error") {
      return {
        error: caption.text
      };
    }
    return {};
  }, [caption]);
  return {
    ...props,
    title: action.title,
    description: action.description,
    image: action.icon,
    buttons: buttons.map(asButtonProps),
    inputs: inputs.map((i) => asInputProps(i)),
    form: form ? asFormProps(form) : void 0,
    ...normalizedCaption
  };
};

// src/ui/layouts/BaseBlinkLayout.tsx



var _clsx = require('clsx'); var _clsx2 = _interopRequireDefault(_clsx);


// src/ui/internal/Badge.tsx

var _jsxruntime = require('react/jsx-runtime');
var variantClasses = {
  error: {
    container: "group bg-transparent-error",
    text: "text-text-error group-hover:text-text-error-hover transition-colors motion-reduce:transition-none",
    icon: "text-icon-error group-hover:text-icon-error-hover transition-colors motion-reduce:transition-none"
  },
  warning: {
    container: "group bg-transparent-warning",
    text: "text-text-warning group-hover:text-text-warning-hover transition-colors motion-reduce:transition-none",
    icon: "text-icon-warning group-hover:text-icon-warning-hover transition-colors motion-reduce:transition-none"
  },
  default: {
    container: "group bg-transparent-grey",
    text: "text-text-primary group-hover:text-text-primary-hover transition-colors motion-reduce:transition-none",
    icon: "text-icon-primary group-hover:text-icon-primary-hover transition-colors motion-reduce:transition-none"
  }
};
var Badge = ({
  variant = "default",
  children,
  className,
  icon
}) => {
  const { container, icon: iconClassNames, text } = variantClasses[variant];
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
    "div",
    {
      className: _clsx2.default.call(void 0, 
        container,
        "inline-flex items-center justify-center gap-1 rounded-full text-subtext font-semibold leading-none",
        className,
        {
          "aspect-square p-1": !children && icon,
          "px-1.5 py-1": children
        }
      ),
      children: [
        children && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: text, children }),
        icon && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className: iconClassNames, children: icon })
      ]
    }
  );
};

// src/ui/internal/Snackbar.tsx


var variantClasses2 = {
  error: "bg-transparent-error text-text-error border-stroke-error",
  warning: "bg-transparent-warning text-text-warning border-stroke-warning"
};
var Snackbar = ({ variant = "warning", children }) => {
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    "div",
    {
      className: _clsx2.default.call(void 0, 
        variantClasses2[variant],
        "rounded-lg border p-3 text-subtext"
      ),
      children
    }
  );
};

// src/ui/internal/icons/CheckIcon.tsx

var CheckIcon = (props) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 17,
    height: 16,
    viewBox: "0 0 17 16",
    fill: "none",
    ...props,
    children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      "path",
      {
        d: "M15.348 3.509a.984.984 0 010 1.437l-8.173 8.172a.984.984 0 01-1.437 0L1.652 9.032a.984.984 0 010-1.437.984.984 0 011.437 0l3.384 3.353 7.438-7.439a.984.984 0 011.437 0z",
        fill: "currentColor"
      }
    )
  }
);

// src/ui/internal/icons/ConfigIcon.tsx

var ConfigIcon = (props) => /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    fill: "none",
    viewBox: "0 0 16 16",
    preserveAspectRatio: "xMidYMid meet",
    ...props,
    children: [
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "path",
        {
          fill: "currentColor",
          d: "M7.037 8.108a2.65 2.65 0 1 1 1.07-1.071 1.522 1.522 0 0 1 1.553.094 1.523 1.523 0 0 1 1.498-1.239h.398v-.49a.666.666 0 0 0-.55-.653l-.866-.151a4.488 4.488 0 0 0-.447-1.078l.505-.72a.666.666 0 0 0-.076-.84l-.519-.528a.666.666 0 0 0-.852-.074l-.72.505a4.482 4.482 0 0 0-1.078-.447L6.802.55A.666.666 0 0 0 6.149 0h-.735a.666.666 0 0 0-.653.55l-.152.866a4.48 4.48 0 0 0-1.078.447l-.726-.505a.666.666 0 0 0-.846.074l-.527.527a.666.666 0 0 0-.074.854l.505.72c-.195.338-.346.7-.447 1.078l-.866.151a.666.666 0 0 0-.55.654v.734a.666.666 0 0 0 .55.653l.866.152c.101.377.251.74.447 1.078l-.505.716a.666.666 0 0 0 .074.854l.527.52a.666.666 0 0 0 .854.075l.72-.505c.338.195.7.346 1.078.447l.151.866a.666.666 0 0 0 .654.55h.49v-.398A1.523 1.523 0 0 1 7.143 9.66a1.522 1.522 0 0 1-.107-1.552ZM16 11.158v.578a.524.524 0 0 1-.434.509l-.683.12a3.53 3.53 0 0 1-.352.86l.398.568a.524.524 0 0 1-.059.672l-.41.41a.524.524 0 0 1-.672.059l-.563-.403a3.537 3.537 0 0 1-.85.352l-.13.683a.524.524 0 0 1-.51.434h-.577a.524.524 0 0 1-.518-.434l-.12-.683a3.536 3.536 0 0 1-.848-.352l-.568.398a.525.525 0 0 1-.673-.059l-.41-.41a.524.524 0 0 1-.059-.672l.4-.563a3.535 3.535 0 0 1-.352-.85l-.683-.13a.524.524 0 0 1-.434-.518v-.57a.524.524 0 0 1 .434-.517l.683-.12a3.54 3.54 0 0 1 .352-.848l-.398-.567a.524.524 0 0 1 .059-.672l.41-.41a.524.524 0 0 1 .672-.059l.567.398c.266-.154.552-.272.849-.352l.119-.683a.524.524 0 0 1 .518-.434h.578a.524.524 0 0 1 .509.434l.12.683c.3.079.59.197.86.352l.566-.398a.524.524 0 0 1 .673.059l.41.41a.524.524 0 0 1 .058.672l-.401.567c.154.266.272.552.352.849l.683.119a.524.524 0 0 1 .434.518Zm-2.991.289a1.563 1.563 0 1 0-3.126 0 1.563 1.563 0 0 0 3.126 0Z"
        }
      ),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "path",
        {
          fill: "currentColor",
          d: "M6.886 5.777a1.105 1.105 0 1 1-2.21 0 1.105 1.105 0 0 1 2.21 0Z"
        }
      )
    ]
  }
);

// src/ui/internal/icons/DeepLinkIcon.tsx

var DeepLinkIcon = (props) => /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 10,
    height: 10,
    fill: "none",
    viewBox: "0 0 10 10",
    preserveAspectRatio: "xMidYMid meet",
    ...props,
    children: [
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "path",
        {
          fill: "currentColor",
          d: "M2.5 1h1.793v1H2.5a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5V5.707h1V7.5A1.5 1.5 0 0 1 7.5 9h-5A1.5 1.5 0 0 1 1 7.5v-5A1.5 1.5 0 0 1 2.5 1Z"
        }
      ),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "path",
        {
          fill: "currentColor",
          d: "M9 4H8V2.708l-3 3L4.293 5l3-3H6V1h2.5a.5.5 0 0 1 .5.5V4Z"
        }
      )
    ]
  }
);

// src/ui/internal/icons/ExclamationShieldIcon.tsx


var ExclamationShieldIcon = (props) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    fill: "none",
    viewBox: "0 0 16 16",
    preserveAspectRatio: "xMidYMid meet",
    ...props,
    children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "m8.38 1.087 5.483 2.334c.641.291 1.137.904 1.137 1.662-.03 2.916-1.225 8.195-6.241 10.616a1.794 1.794 0 0 1-1.546 0c-5.016-2.42-6.212-7.7-6.212-10.616-.029-.758.467-1.37 1.108-1.662l5.483-2.334a.932.932 0 0 1 .788 0Zm-1.313 10.29c0 .524.408.933.933.933a.94.94 0 0 0 .933-.934.96.96 0 0 0-.933-.933.94.94 0 0 0-.933.934ZM8 4.109a.9.9 0 0 0-.9.9v3.606a.9.9 0 0 0 1.8 0V5.01a.9.9 0 0 0-.9-.9Z",
        clipRule: "evenodd"
      }
    )
  }
);

// src/ui/internal/icons/InfoShieldIcon.tsx


var InfoShieldIcon = (props) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    fill: "none",
    viewBox: "0 0 16 16",
    preserveAspectRatio: "xMidYMid meet",
    ...props,
    children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M13.863 3.42 8.38 1.088a.932.932 0 0 0-.787 0L2.108 3.421c-.641.291-1.137.904-1.108 1.662 0 2.916 1.196 8.195 6.212 10.616.496.233 1.05.233 1.546 0 5.016-2.42 6.212-7.7 6.241-10.616 0-.758-.496-1.37-1.137-1.662Zm-6.33 7.35h-.582a.69.69 0 0 0-.7.7c0 .408.292.7.7.7h2.216c.379 0 .7-.292.7-.7 0-.38-.321-.7-.7-.7h-.234V8.204c0-.38-.32-.7-.7-.7H7.208a.69.69 0 0 0-.7.7c0 .408.292.7.7.7h.326v1.866Zm-.466-5.133c0 .525.408.933.933.933a.94.94 0 0 0 .933-.933A.96.96 0 0 0 8 4.704a.94.94 0 0 0-.933.933Z",
        clipRule: "evenodd"
      }
    )
  }
);

// src/ui/internal/icons/LinkIcon.tsx


var LinkIcon = (props) => /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    fill: "none",
    viewBox: "0 0 16 16",
    preserveAspectRatio: "xMidYMid meet",
    ...props,
    children: [
      /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "g", { fill: "currentColor", clipPath: "url(#a)", children: [
        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", { d: "M7.409 9.774 9.774 7.41a.836.836 0 1 0-1.183-1.183L6.226 8.592A.836.836 0 1 0 7.41 9.774Z" }),
        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", { d: "M10.76.503A4.709 4.709 0 0 0 7.41 1.889L5.83 3.467A.836.836 0 1 0 7.014 4.65L8.59 3.072a3.067 3.067 0 0 1 4.338 4.337L11.35 8.987a.835.835 0 1 0 1.182 1.182l1.578-1.577a4.738 4.738 0 0 0-3.35-8.09ZM5.24 15.497a4.706 4.706 0 0 0 3.351-1.386l1.578-1.577a.836.836 0 1 0-1.182-1.183l-1.578 1.578a3.067 3.067 0 1 1-4.337-4.337L4.65 7.014A.836.836 0 1 0 3.467 5.83L1.889 7.41a4.737 4.737 0 0 0 3.351 8.088Z" })
      ] }),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "defs", { children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "clipPath", { id: "a", children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", { fill: "#fff", d: "M0 0h16v16H0z" }) }) })
    ]
  }
);

// src/ui/internal/icons/SpinnerDots.tsx


var POINTS = [0, 45, 90, 135, 180, 225, 270, 315];
var SpinnerDots = ({
  width = 16
}) => {
  const dots = _react.useMemo.call(void 0, 
    () => POINTS.map((point, index) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      "circle",
      {
        cy: 12,
        cx: 12,
        r: 4,
        transform: `rotate(${point}, 24, 24)`,
        fillOpacity: index < 2 ? 0 : 1
      },
      point
    )),
    []
  );
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, { children: [
    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "style", { children: "@keyframes spin{to{transform:rotate(360deg)}}" }),
    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      "svg",
      {
        viewBox: "0 0 48 48",
        width,
        fill: "currentColor",
        "data-testid": "rotating-dots-svg",
        "aria-label": "rotating-dots-loading",
        style: {
          animationDuration: "1s",
          animation: "spin 1s steps(8, end) infinite"
        },
        children: dots
      }
    )
  ] });
};

// src/ui/internal/Button.tsx


var Button = ({
  onClick,
  disabled,
  variant = "default",
  children,
  ctaType = "button"
}) => {
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
    "button",
    {
      className: _clsx2.default.call(void 0, 
        "rounded-button text-text relative flex w-full items-center justify-center text-nowrap px-4 py-3 font-semibold transition-colors motion-reduce:transition-none",
        {
          "bg-button-disabled text-text-button-disabled": disabled && variant !== "success",
          "bg-button text-text-button hover:bg-button-hover": !disabled && variant !== "success",
          "bg-button-success text-text-button-success": variant === "success"
          // success is likely to be always disabled
        }
      ),
      disabled,
      onClick,
      children: [
        children,
        ctaType === "link" && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "absolute right-1 top-1", children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          DeepLinkIcon,
          {
            className: _clsx2.default.call(void 0, "h-2.5 w-2.5", {
              "text-text-button-disabled": disabled && variant !== "success",
              "text-text-button": !disabled && variant !== "success",
              "text-text-button-success": variant === "success"
              // success is likely to be always disabled
            })
          }
        ) })
      ]
    }
  );
};

// src/ui/internal/inputs/ActionButton.tsx

var ActionButton = ({
  text,
  loading,
  disabled,
  variant,
  onClick,
  ctaType
}) => {
  const ButtonContent = () => {
    if (loading)
      return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "span", { className: "flex flex-row items-center justify-center gap-2 text-nowrap", children: [
        text,
        " ",
        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, SpinnerDots, {})
      ] });
    if (variant === "success")
      return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "span", { className: "flex flex-row items-center justify-center gap-2 text-nowrap", children: [
        text,
        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CheckIcon, {})
      ] });
    return text;
  };
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    Button,
    {
      onClick: () => onClick(),
      disabled,
      variant,
      ctaType,
      children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "min-w-0 truncate", children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ButtonContent, {}) })
    }
  );
};

// src/ui/internal/inputs/ActionCheckboxGroup.tsx



// src/ui/internal/Checkbox.tsx



// src/ui/internal/icons/CheckboxCheckIcon.tsx

var SvgComponent = (props) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    fill: "none",
    viewBox: "0 0 16 16",
    preserveAspectRatio: "xMidYMid meet",
    ...props,
    children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M12.6 5.398a.85.85 0 0 1-.001 1.202l-4.784 4.773a.85.85 0 0 1-1.193.008L3.934 8.77a.85.85 0 0 1 1.184-1.22l2.088 2.027 4.192-4.182a.85.85 0 0 1 1.202.002Z",
        clipRule: "evenodd"
      }
    )
  }
);
var CheckboxCheckIcon_default = SvgComponent;

// src/ui/internal/Checkbox.tsx

var Checkbox = ({
  label,
  value,
  onChange,
  name,
  disabled,
  inputValue
}) => {
  const id = _react.useId.call(void 0, );
  const labelId = `${id}_label`;
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
    "button",
    {
      className: _clsx2.default.call(void 0, "flex h-full gap-2.5", {
        "cursor-pointer": !disabled,
        "cursor-not-allowed": disabled
      }),
      onClick: () => !disabled && onChange(!value),
      children: [
        /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "flex h-full items-center", children: [
          /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
            "input",
            {
              type: "checkbox",
              name,
              className: "hidden",
              defaultValue: inputValue
            }
          ),
          /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
            "span",
            {
              role: "checkbox",
              id,
              "aria-labelledby": labelId,
              className: _clsx2.default.call(void 0, 
                "mt-0.5 flex aspect-square h-[16px] items-center justify-center rounded-lg border transition-colors motion-reduce:transition-none",
                {
                  "border-input-stroke bg-input-bg": !value && !disabled,
                  "border-input-stroke-selected bg-input-bg-selected": value && !disabled,
                  "border-input-stroke-disabled bg-input-bg": !value && disabled,
                  "border-input-stroke-disabled bg-input-bg-disabled": value && disabled
                }
              ),
              children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
                CheckboxCheckIcon_default,
                {
                  className: _clsx2.default.call(void 0, "h-full w-full text-input-bg", {
                    block: value,
                    hidden: !value
                  })
                }
              )
            }
          )
        ] }),
        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          "label",
          {
            className: "cursor-[inherit] text-text text-text-input",
            id: labelId,
            children: label
          }
        )
      ]
    }
  );
};

// src/ui/internal/inputs/utils.ts
var buildDefaultTextDescription = ({
  min,
  max
}) => {
  if (min && max) return `Type between ${min} and ${max} characters`;
  if (min) return `Type minimum ${min} characters`;
  if (max) return `Type maximum ${max} characters`;
  return null;
};
var buildDefaultNumberDescription = ({
  min,
  max
}) => {
  if (min && max) return `Enter a number between ${min} and ${max}`;
  if (min) return `Enter a number greater than ${min}`;
  if (max) return `Enter a number less than ${max}`;
  return null;
};
var buildDefaultDateDescription = ({
  min,
  max,
  includeTime
}) => {
  const minDate = min ? new Date(min) : null;
  const maxDate = max ? new Date(max) : null;
  const formatter = new Intl.DateTimeFormat("en", {
    year: "numeric",
    month: "numeric",
    day: "numeric",
    hour: includeTime ? "numeric" : void 0,
    minute: includeTime ? "numeric" : void 0
  });
  if (minDate && maxDate)
    return `Pick a date between ${formatter.format(minDate)} and ${formatter.format(maxDate)}`;
  if (minDate) return `Pick a date after ${formatter.format(minDate)}`;
  if (maxDate) return `Pick a date before ${formatter.format(maxDate)}`;
  return null;
};
var buildDefaultCheckboxGroupDescription = ({
  min,
  max
}) => {
  if (min && max) return `Select between ${min} and ${max} options`;
  if (min) return `Select minimum ${min} options`;
  if (max) return `Select maximum ${max} options`;
  return null;
};

// src/ui/internal/inputs/ActionCheckboxGroup.tsx

var validate = (values, { required, min, max }) => {
  if (required && !values.length) {
    return false;
  }
  if (min && values.length < min) {
    return false;
  }
  if (max && values.length > max) {
    return false;
  }
  return true;
};
var normalizeValue = (value) => {
  return Object.entries(value).filter(([, v]) => v).map(([k]) => k);
};
var ActionCheckboxGroup = ({
  placeholder: label,
  // in base inputs it's placeholder, for selectables - label
  name,
  button,
  disabled,
  onChange,
  onValidityChange,
  min,
  max,
  description,
  options = [],
  required
}) => {
  const minChoices = min;
  const maxChoices = max;
  const isStandalone = !!button;
  const finalDescription = description || buildDefaultCheckboxGroupDescription({
    min: minChoices,
    max: maxChoices
  });
  const hasInitiallySelectedOption = _react.useMemo.call(void 0, 
    () => options.find((option) => option.selected),
    [options]
  );
  const [state, setState] = _react.useState.call(void 0, {
    value: Object.fromEntries(
      options.map((option) => [option.value, _nullishCoalesce(option.selected, () => ( false))])
    ),
    valid: isStandalone ? !!hasInitiallySelectedOption : !(required && !hasInitiallySelectedOption)
  });
  const [touched, setTouched] = _react.useState.call(void 0, false);
  _react.useEffect.call(void 0, () => {
    _optionalChain([onValidityChange, 'optionalCall', _22 => _22(state.valid)]);
  }, []);
  const extendedChange = (name2, value) => {
    setState((prev) => {
      const newValue = { ...prev.value, [name2]: value };
      const normalizedValue2 = normalizeValue(newValue);
      _optionalChain([onChange, 'optionalCall', _23 => _23(normalizedValue2)]);
      const validity = validate(normalizedValue2, {
        required: isStandalone,
        min: minChoices,
        max: maxChoices
      });
      _optionalChain([onValidityChange, 'optionalCall', _24 => _24(validity)]);
      return {
        value: newValue,
        valid: validity
      };
    });
    setTouched(true);
  };
  const normalizedValue = _react.useMemo.call(void 0, 
    () => normalizeValue(state.value),
    [state.value]
  );
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
    "div",
    {
      className: _clsx2.default.call(void 0, "py-1.5", {
        "bg-bg-secondary rounded-input px-1.5 pt-2": isStandalone
      }),
      children: [
        /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: _clsx2.default.call(void 0, isStandalone && "px-2"), children: [
          label && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className: "mb-1", children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "label", { className: "block text-text font-semibold text-text-input", children: [
            label,
            required ? "*" : ""
          ] }) }),
          /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
            "div",
            {
              className: _clsx2.default.call(void 0, "pt-2", {
                "flex flex-col gap-3": !isStandalone,
                "grid grid-cols-2 gap-x-4 gap-y-5": isStandalone
              }),
              children: options.map((option) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
                "div",
                {
                  className: "inline-flex",
                  children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
                    Checkbox,
                    {
                      label: option.label,
                      value: state.value[option.value],
                      inputValue: option.value,
                      onChange: (value) => extendedChange(option.value, value),
                      name,
                      disabled
                    }
                  )
                },
                `${option.value}_${option.label}`
              ))
            }
          )
        ] }),
        isStandalone && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className: "mt-4", children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          ActionButton,
          {
            ...button,
            onClick: () => button.onClick({ [name]: normalizedValue }),
            disabled: button.disabled || !normalizedValue.length || !state.valid
          }
        ) }),
        finalDescription && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          "div",
          {
            className: _clsx2.default.call(void 0, 
              "text-caption",
              touched && !state.valid ? "text-text-error" : "text-text-secondary",
              isStandalone ? "mb-2 mt-2.5 px-2" : "mt-3"
            ),
            children: finalDescription
          }
        )
      ]
    }
  );
};

// src/ui/internal/inputs/ActionDateInput.tsx








// src/ui/internal/icons/CalendarIcon.tsx

var SvgComponent2 = (props) => /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    fill: "none",
    viewBox: "0 0 16 16",
    preserveAspectRatio: "xMidYMid meet",
    ...props,
    children: [
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "g", { clipPath: "url(#a)", children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "path",
        {
          fill: "currentColor",
          fillRule: "evenodd",
          d: "M5.805 1.232a.732.732 0 1 0-1.464 0v.37c-.362.006-.685.019-.969.048-.526.055-1.004.174-1.428.468-.29.2-.54.451-.741.74-.294.425-.412.902-.467 1.429-.049.462-.053 1.026-.053 1.7V10.43c0 .99 0 1.808.087 2.454.091.68.29 1.279.77 1.759.48.48 1.08.679 1.759.77.646.087 1.463.087 2.454.087h4.494c.99 0 1.808 0 2.454-.087.68-.091 1.279-.29 1.759-.77.48-.48.679-1.08.77-1.759.087-.646.087-1.463.087-2.454V5.988c0-.675-.004-1.239-.053-1.701-.055-.527-.173-1.004-.467-1.428-.2-.29-.452-.54-.741-.741-.425-.294-.902-.413-1.428-.468-.284-.03-.607-.042-.97-.048v-.37a.732.732 0 0 0-1.463 0v.366h-4.39v-.366Zm8.049 4.756c-.001-.685-.006-1.17-.045-1.55-.043-.406-.12-.607-.215-.746-.1-.145-.226-.27-.371-.37-.14-.097-.34-.174-.747-.216a9.532 9.532 0 0 0-.818-.04v.36a.732.732 0 0 1-1.463 0v-.365h-4.39v.366a.732.732 0 1 1-1.464 0v-.361c-.324.005-.59.016-.817.04-.407.042-.608.119-.747.215-.145.1-.27.226-.37.37-.097.14-.173.34-.216.748-.04.379-.044.864-.045 1.549h11.707ZM2.146 7.45v2.927c0 1.056.002 1.774.074 2.311.07.517.192.756.355.919.163.163.402.285.919.355.537.072 1.255.074 2.31.074h4.391c1.056 0 1.774-.002 2.311-.074.517-.07.756-.192.919-.355.163-.163.285-.402.355-.919.072-.537.074-1.255.074-2.311V7.451H2.146Z",
          clipRule: "evenodd"
        }
      ) }),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "defs", { children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "clipPath", { id: "a", children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", { fill: "#fff", d: "M0 0h16v16H0z" }) }) })
    ]
  }
);
var CalendarIcon_default = SvgComponent2;

// src/ui/internal/inputs/BaseInputContainer.tsx





var BaseInputContainer = ({
  children,
  leftAdornment,
  rightAdornment,
  footer,
  description,
  standalone = true
}) => {
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { children: [
    /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
      "div",
      {
        className: _clsx2.default.call(void 0, 
          "peer relative flex min-h-10 flex-wrap items-center gap-1.5 gap-y-2 border border-input-stroke p-1.5 transition-colors motion-reduce:transition-none",
          // focus, invalid, required
          "focus-within:has-[:invalid]:border-input-stroke-error focus-within:has-[:valid]:border-input-stroke-selected focus-within:hover:has-[:invalid]:border-input-stroke-error focus-within:hover:has-[:valid]:border-input-stroke-selected",
          // enabled,
          "hover:has-[:enabled]:border-input-stroke-hover",
          standalone ? "rounded-input-standalone" : "rounded-input"
        ),
        children: [
          /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "flex min-w-0 flex-[10] basis-1/2 items-center gap-1.5 pl-2.5", children: [
            leftAdornment && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { children: leftAdornment }),
            _react.cloneElement.call(void 0, children, {
              className: _clsx2.default.call(void 0, 
                "min-h-7 min-w-0 flex-1 truncate bg-input-bg text-text-input outline-none placeholder:text-text-input-placeholder disabled:text-text-input-disabled",
                children.props.className
              )
            })
          ] }),
          rightAdornment && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className: "max-w-full flex-1 whitespace-nowrap", children: rightAdornment })
        ]
      }
    ),
    footer && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className: "mt-2", children: footer }),
    description && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "mt-2 text-caption font-medium text-text-secondary peer-[:focus-within:has(:invalid)]:text-text-error", children: description })
  ] });
};

// src/ui/internal/inputs/ActionDateInput.tsx

var ActionDateInput = ({
  type = "date",
  placeholder,
  name,
  button,
  disabled,
  onChange,
  onValidityChange,
  pattern,
  min,
  max,
  description,
  required
}) => {
  const id = _react.useId.call(void 0, );
  const isStandalone = !!button;
  const [value, setValue] = _react.useState.call(void 0, "");
  const [isValid, setValid] = _react.useState.call(void 0, !isStandalone && !required);
  const [touched, setTouched] = _react.useState.call(void 0, false);
  const minDate = min;
  const maxDate = max;
  _react.useEffect.call(void 0, () => {
    _optionalChain([onValidityChange, 'optionalCall', _25 => _25(isValid)]);
  }, []);
  const extendedChange = _react.useCallback.call(void 0, 
    (e) => {
      const value2 = e.currentTarget.value;
      const validity = e.currentTarget.checkValidity();
      setValue(value2);
      setValid(validity);
      _optionalChain([onChange, 'optionalCall', _26 => _26(value2)]);
      _optionalChain([onValidityChange, 'optionalCall', _27 => _27(validity)]);
    },
    [onChange, onValidityChange]
  );
  const placeholderWithRequired = (placeholder || "Enter a date") + (required ? "*" : "");
  const validationProps = _react.useMemo.call(void 0, 
    () => ({
      min: minDate,
      max: maxDate,
      pattern,
      title: description
    }),
    [minDate, maxDate, pattern, description]
  );
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    BaseInputContainer,
    {
      standalone: isStandalone,
      description: _nullishCoalesce(description, () => ( buildDefaultDateDescription({ min: minDate, max: maxDate }))),
      leftAdornment: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "label", { htmlFor: id, children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CalendarIcon_default, { className: "text-icon-primary" }) }),
      rightAdornment: button ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        ActionButton,
        {
          ...button,
          onClick: () => button.onClick({ [name]: value }),
          disabled: button.disabled || value === "" || !isValid
        }
      ) : null,
      children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "input",
        {
          id,
          type: pattern || !touched ? "text" : type,
          placeholder: placeholderWithRequired,
          value,
          onChange: extendedChange,
          onFocus: () => setTouched(true),
          ...validationProps,
          required: button ? true : required,
          disabled
        }
      )
    }
  );
};

// src/ui/internal/inputs/ActionEmailInput.tsx


// src/ui/internal/icons/EmailIcon.tsx

var SvgComponent3 = (props) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    fill: "none",
    viewBox: "0 0 16 16",
    preserveAspectRatio: "xMidYMid meet",
    ...props,
    children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      "path",
      {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M1.361 2.685a.764.764 0 0 0-.157.227A2.986 2.986 0 0 0 .75 4.5v7a3 3 0 0 0 3 3h8.5a3 3 0 0 0 3-3v-7c0-.583-.166-1.128-.454-1.588a.75.75 0 0 0-.157-.227A2.995 2.995 0 0 0 12.25 1.5h-8.5c-.975 0-1.841.465-2.389 1.185ZM3.75 3h8.5c.27 0 .522.071.74.195L8.815 6.817a1.25 1.25 0 0 1-1.638-.001l-4.167-3.62C3.227 3.07 3.48 3 3.75 3Zm10 1.522V11.5a1.5 1.5 0 0 1-1.5 1.5h-8.5a1.5 1.5 0 0 1-1.5-1.5V4.524l3.942 3.424a2.75 2.75 0 0 0 3.605.002l3.953-3.428Z",
        clipRule: "evenodd"
      }
    )
  }
);
var EmailIcon_default = SvgComponent3;

// src/ui/internal/inputs/ActionEmailInput.tsx

var ActionEmailInput = ({
  placeholder,
  name,
  button,
  disabled,
  onChange,
  onValidityChange,
  pattern,
  min,
  max,
  description,
  required
}) => {
  const id = _react.useId.call(void 0, );
  const isStandalone = !!button;
  const [value, setValue] = _react.useState.call(void 0, "");
  const [isValid, setValid] = _react.useState.call(void 0, !isStandalone && !required);
  const minLength = min;
  const maxLength = max;
  _react.useEffect.call(void 0, () => {
    _optionalChain([onValidityChange, 'optionalCall', _28 => _28(isValid)]);
  }, []);
  const extendedChange = (e) => {
    const value2 = e.currentTarget.value;
    const validity = e.currentTarget.checkValidity();
    setValue(value2);
    setValid(validity);
    _optionalChain([onChange, 'optionalCall', _29 => _29(value2)]);
    _optionalChain([onValidityChange, 'optionalCall', _30 => _30(validity)]);
  };
  const placeholderWithRequired = (placeholder || "hello@example.com") + (required ? "*" : "");
  const validationProps = _react.useMemo.call(void 0, 
    () => ({
      minLength,
      maxLength,
      pattern,
      title: description
    }),
    [minLength, maxLength, pattern, description]
  );
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    BaseInputContainer,
    {
      standalone: isStandalone,
      description: _nullishCoalesce(description, () => ( buildDefaultTextDescription({ min: minLength, max: maxLength }))),
      leftAdornment: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "label", { htmlFor: id, children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, EmailIcon_default, { className: "text-icon-primary" }) }),
      rightAdornment: button ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        ActionButton,
        {
          ...button,
          onClick: () => button.onClick({ [name]: value }),
          disabled: button.disabled || value === "" || !isValid
        }
      ) : null,
      children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "input",
        {
          id,
          type: pattern ? "text" : "email",
          placeholder: placeholderWithRequired,
          value,
          onChange: extendedChange,
          ...validationProps,
          required: button ? true : required,
          disabled
        }
      )
    }
  );
};

// src/ui/internal/inputs/ActionNumberInput.tsx


// src/ui/internal/icons/NumberIcon.tsx

var SvgComponent4 = (props) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16,
    fill: "none",
    viewBox: "0 0 16 16",
    preserveAspectRatio: "xMidYMid meet",
    ...props,
    children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      "path",
      {
        fill: "currentColor",
        d: "M11.721 1a.75.75 0 0 0-.745.664l-.299 2.586h-4.5l.28-2.42a.745.745 0 0 0-1.48-.17l-.3 2.59H1.75a.75.75 0 0 0 0 1.5H4.5l-.515 4.5H1.75a.75.75 0 0 0 0 1.5h2.063l-.28 2.42a.745.745 0 1 0 1.48.17l.3-2.59h4.5l-.28 2.42a.745.745 0 0 0 1.48.17l.3-2.59h2.937a.75.75 0 0 0 0-1.5H11.5l.52-4.5h2.23a.75.75 0 0 0 0-1.5h-2.063l.279-2.414A.75.75 0 0 0 11.721 1Zm-1.736 9.25H5.5l.52-4.5h4.48l-.515 4.5Z"
      }
    )
  }
);
var NumberIcon_default = SvgComponent4;

// src/ui/internal/inputs/ActionNumberInput.tsx

var ActionNumberInput = ({
  placeholder,
  name,
  button,
  disabled,
  onChange,
  onValidityChange,
  pattern,
  min,
  max,
  description,
  required
}) => {
  const id = _react.useId.call(void 0, );
  const isStandalone = !!button;
  const [value, setValue] = _react.useState.call(void 0, "");
  const [isValid, setValid] = _react.useState.call(void 0, !isStandalone && !required);
  _react.useEffect.call(void 0, () => {
    _optionalChain([onValidityChange, 'optionalCall', _31 => _31(isValid)]);
  }, []);
  const extendedChange = (e) => {
    const value2 = e.currentTarget.value;
    const validity = e.currentTarget.checkValidity();
    setValue(value2);
    setValid(validity);
    _optionalChain([onChange, 'optionalCall', _32 => _32(value2)]);
    _optionalChain([onValidityChange, 'optionalCall', _33 => _33(validity)]);
  };
  const placeholderWithRequired = (placeholder || "Type here...") + (required ? "*" : "");
  const validationProps = _react.useMemo.call(void 0, 
    () => ({
      min: !pattern ? min : void 0,
      max: !pattern ? max : void 0,
      pattern,
      title: description
    }),
    [min, max, pattern, description]
  );
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    BaseInputContainer,
    {
      standalone: isStandalone,
      description: _nullishCoalesce(description, () => ( buildDefaultNumberDescription({
        min,
        max
      }))),
      leftAdornment: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "label", { htmlFor: id, children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, NumberIcon_default, { className: "text-icon-primary" }) }),
      rightAdornment: button ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        ActionButton,
        {
          ...button,
          onClick: () => button.onClick({ [name]: value }),
          disabled: button.disabled || value === "" || !isValid
        }
      ) : null,
      children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "input",
        {
          id,
          type: pattern ? "text" : "number",
          placeholder: placeholderWithRequired,
          value,
          step: "any",
          onChange: extendedChange,
          ...validationProps,
          required: button ? true : required,
          disabled
        }
      )
    }
  );
};

// src/ui/internal/inputs/ActionRadioGroup.tsx



// src/ui/internal/Radio.tsx



var Radio = ({
  label,
  value,
  onChange,
  name,
  disabled,
  inputValue
}) => {
  const id = _react.useId.call(void 0, );
  const labelId = `${id}_label`;
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
    "button",
    {
      className: _clsx2.default.call(void 0, "flex h-full gap-2.5", {
        "cursor-pointer": !disabled,
        "cursor-not-allowed": disabled
      }),
      onClick: () => !disabled && onChange(!value),
      children: [
        /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "flex h-full items-center", children: [
          /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
            "input",
            {
              type: "radio",
              name,
              className: "hidden",
              defaultValue: inputValue
            }
          ),
          /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
            "div",
            {
              role: "radio",
              id,
              "aria-labelledby": labelId,
              className: _clsx2.default.call(void 0, 
                "mt-0.5 flex aspect-square h-[16px] items-center justify-center rounded-full border transition-colors motion-reduce:transition-none",
                {
                  "border-input-stroke bg-input-bg": !value && !disabled,
                  "border-input-stroke-selected bg-input-bg-selected": value && !disabled,
                  "border-input-stroke-disabled bg-input-bg": !value && disabled,
                  "border-input-stroke-disabled bg-input-bg-disabled": value && disabled
                }
              ),
              children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
                "div",
                {
                  className: _clsx2.default.call(void 0, "aspect-square h-[8px] rounded-full bg-input-bg", {
                    invisible: !value
                  })
                }
              )
            }
          )
        ] }),
        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          "label",
          {
            className: "cursor-[inherit] text-text text-text-input",
            id: labelId,
            children: label
          }
        )
      ]
    }
  );
};

// src/ui/internal/inputs/ActionRadioGroup.tsx

var ActionRadioGroup = ({
  placeholder: label,
  // in base inputs it's placeholder, for selectables - label
  name,
  button,
  disabled,
  onChange,
  onValidityChange,
  description,
  options = [],
  required
}) => {
  const isStandalone = !!button;
  const hasInitiallySelectedOption = _react.useMemo.call(void 0, 
    () => options.find((option) => option.selected),
    [options]
  );
  const [value, setValue] = _react.useState.call(void 0, 
    _nullishCoalesce(_optionalChain([options, 'access', _34 => _34.find, 'call', _35 => _35((option) => option.selected), 'optionalAccess', _36 => _36.value]), () => ( ""))
  );
  const [isValid, setValid] = _react.useState.call(void 0, 
    isStandalone ? !!hasInitiallySelectedOption : !(required && !hasInitiallySelectedOption)
  );
  const [touched, setTouched] = _react.useState.call(void 0, false);
  _react.useEffect.call(void 0, () => {
    _optionalChain([onValidityChange, 'optionalCall', _37 => _37(isValid)]);
  }, []);
  const extendedChange = _react.useCallback.call(void 0, 
    (value2) => {
      setValue(value2);
      setValid(true);
      setTouched(true);
      _optionalChain([onChange, 'optionalCall', _38 => _38(value2)]);
      _optionalChain([onValidityChange, 'optionalCall', _39 => _39(true)]);
    },
    [onChange, onValidityChange]
  );
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
    "div",
    {
      className: _clsx2.default.call(void 0, "py-1.5", {
        "bg-bg-secondary rounded-input px-1.5 pt-2": isStandalone
      }),
      children: [
        /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: _clsx2.default.call(void 0, isStandalone && "px-2"), children: [
          label && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className: "mb-1", children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "label", { className: "block text-text font-semibold text-text-input", children: [
            label,
            required ? "*" : ""
          ] }) }),
          /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
            "div",
            {
              className: _clsx2.default.call(void 0, "pt-2", {
                "flex flex-col gap-3": !isStandalone,
                "grid grid-cols-2 gap-x-4 gap-y-5": isStandalone
              }),
              children: options.map((option) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
                "div",
                {
                  className: "inline-flex",
                  children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
                    Radio,
                    {
                      label: option.label,
                      value: option.value === value,
                      inputValue: option.value,
                      onChange: () => extendedChange(option.value),
                      name,
                      disabled
                    }
                  )
                },
                `${option.value}_${option.label}`
              ))
            }
          )
        ] }),
        isStandalone && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className: "mt-4", children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          ActionButton,
          {
            ...button,
            onClick: () => button.onClick({ [name]: value }),
            disabled: button.disabled || !value || !isValid
          }
        ) }),
        description && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          "span",
          {
            className: _clsx2.default.call(void 0, 
              "text-caption font-medium",
              touched && !isValid ? "text-text-error" : "text-text-secondary",
              isStandalone ? "mb-2 mt-2.5" : "mt-3"
            ),
            children: description
          }
        )
      ]
    }
  );
};

// src/ui/internal/inputs/ActionSelect.tsx


var ActionSelect = ({
  placeholder,
  name,
  button,
  disabled,
  onChange,
  onValidityChange,
  description,
  required,
  options = []
}) => {
  const isStandalone = !!button;
  const placeholderValueId = _react.useId.call(void 0, );
  const placeholderWithRequired = (placeholder || "Select...") + (required ? "*" : "");
  const initiallySelectedOption = _react.useMemo.call(void 0, 
    () => options.find((option) => option.selected),
    [options]
  );
  const [value, setValue] = _react.useState.call(void 0, 
    _nullishCoalesce(_optionalChain([initiallySelectedOption, 'optionalAccess', _40 => _40.value]), () => ( placeholderValueId))
  );
  const [isValid, setValid] = _react.useState.call(void 0, 
    isStandalone ? !!initiallySelectedOption : !(required && !initiallySelectedOption)
  );
  _react.useEffect.call(void 0, () => {
    _optionalChain([onValidityChange, 'optionalCall', _41 => _41(isValid)]);
  }, []);
  const extendedChange = (e) => {
    const value2 = e.currentTarget.value;
    const validity = e.currentTarget.checkValidity() && placeholderValueId !== value2;
    setValue(value2);
    setValid(validity);
    _optionalChain([onChange, 'optionalCall', _42 => _42(value2)]);
    _optionalChain([onValidityChange, 'optionalCall', _43 => _43(validity)]);
  };
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    BaseInputContainer,
    {
      standalone: isStandalone,
      description,
      rightAdornment: button ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        ActionButton,
        {
          ...button,
          onClick: () => button.onClick({ [name]: value }),
          disabled: button.disabled || value === "" || !isValid
        }
      ) : null,
      children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
        "select",
        {
          className: "mr-1.5 cursor-pointer",
          value,
          onChange: extendedChange,
          required: button ? true : required,
          disabled,
          children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "option", { disabled: true, value: placeholderValueId, children: placeholderWithRequired }),
            options.map((option) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "option", { value: option.value, children: option.label }, `${option.value}_${option.label}`))
          ]
        }
      )
    }
  );
};

// src/ui/internal/inputs/ActionTextArea.tsx


var ActionTextArea = ({
  placeholder,
  name,
  button,
  disabled,
  onChange,
  onValidityChange,
  min,
  max,
  description,
  required
}) => {
  const isStandalone = !!button;
  const [value, setValue] = _react.useState.call(void 0, "");
  const [isValid, setValid] = _react.useState.call(void 0, !isStandalone && !required);
  const minLength = min;
  const maxLength = max;
  _react.useEffect.call(void 0, () => {
    _optionalChain([onValidityChange, 'optionalCall', _44 => _44(isValid)]);
  }, []);
  const extendedChange = (e) => {
    const value2 = e.currentTarget.value;
    const validity = e.currentTarget.checkValidity();
    setValue(value2);
    setValid(validity);
    _optionalChain([onChange, 'optionalCall', _45 => _45(value2)]);
    _optionalChain([onValidityChange, 'optionalCall', _46 => _46(validity)]);
  };
  const placeholderWithRequired = (placeholder || "Type here...") + (required ? "*" : "");
  const validationProps = _react.useMemo.call(void 0, 
    () => ({
      minLength,
      maxLength,
      title: description
    }),
    [minLength, maxLength, description]
  );
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    BaseInputContainer,
    {
      standalone: false,
      description: _nullishCoalesce(description, () => ( buildDefaultTextDescription({ min: minLength, max: maxLength }))),
      footer: button ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        ActionButton,
        {
          ...button,
          onClick: () => button.onClick({ [name]: value }),
          disabled: button.disabled || value === "" || !isValid
        }
      ) : null,
      children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "textarea",
        {
          placeholder: placeholderWithRequired,
          value,
          onChange: extendedChange,
          ...validationProps,
          rows: 3,
          required: button ? true : required,
          disabled
        }
      )
    }
  );
};

// src/ui/internal/inputs/ActionTextInput.tsx


var ActionTextInput = ({
  placeholder,
  name,
  button,
  disabled,
  onChange,
  onValidityChange,
  pattern,
  min,
  max,
  description,
  required
}) => {
  const isStandalone = !!button;
  const [value, setValue] = _react.useState.call(void 0, "");
  const [isValid, setValid] = _react.useState.call(void 0, !isStandalone && !required);
  const minLength = min;
  const maxLength = max;
  _react.useEffect.call(void 0, () => {
    _optionalChain([onValidityChange, 'optionalCall', _47 => _47(isValid)]);
  }, []);
  const extendedChange = (e) => {
    const value2 = e.currentTarget.value;
    const validity = e.currentTarget.checkValidity();
    setValue(value2);
    setValid(validity);
    _optionalChain([onChange, 'optionalCall', _48 => _48(value2)]);
    _optionalChain([onValidityChange, 'optionalCall', _49 => _49(validity)]);
  };
  const placeholderWithRequired = (placeholder || "Type here...") + (required ? "*" : "");
  const validationProps = _react.useMemo.call(void 0, 
    () => ({
      minLength,
      maxLength,
      pattern,
      title: description
    }),
    [minLength, maxLength, pattern, description]
  );
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    BaseInputContainer,
    {
      standalone: isStandalone,
      description: _nullishCoalesce(description, () => ( buildDefaultTextDescription({ min: minLength, max: maxLength }))),
      rightAdornment: button ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        ActionButton,
        {
          ...button,
          onClick: () => button.onClick({ [name]: value }),
          disabled: button.disabled || value === "" || !isValid
        }
      ) : null,
      children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "input",
        {
          type: "text",
          placeholder: placeholderWithRequired,
          value,
          onChange: extendedChange,
          ...validationProps,
          required: button ? true : required,
          disabled
        }
      )
    }
  );
};

// src/ui/internal/inputs/ActionUrlInput.tsx


var ActionUrlInput = ({
  placeholder,
  name,
  button,
  disabled,
  onChange,
  onValidityChange,
  pattern,
  min,
  max,
  description,
  required
}) => {
  const isStandalone = !!button;
  const id = _react.useId.call(void 0, );
  const [value, setValue] = _react.useState.call(void 0, "");
  const [isValid, setValid] = _react.useState.call(void 0, !isStandalone && !required);
  const minLength = min;
  const maxLength = max;
  _react.useEffect.call(void 0, () => {
    _optionalChain([onValidityChange, 'optionalCall', _50 => _50(isValid)]);
  }, []);
  const extendedChange = (e) => {
    const value2 = e.currentTarget.value;
    const validity = e.currentTarget.checkValidity();
    setValue(value2);
    setValid(validity);
    _optionalChain([onChange, 'optionalCall', _51 => _51(value2)]);
    _optionalChain([onValidityChange, 'optionalCall', _52 => _52(validity)]);
  };
  const placeholderWithRequired = (placeholder || "https://") + (required ? "*" : "");
  const validationProps = _react.useMemo.call(void 0, 
    () => ({
      minLength,
      maxLength,
      pattern,
      title: description
    }),
    [minLength, maxLength, pattern, description]
  );
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    BaseInputContainer,
    {
      standalone: isStandalone,
      description: _nullishCoalesce(description, () => ( buildDefaultTextDescription({ min: minLength, max: maxLength }))),
      leftAdornment: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "label", { htmlFor: id, children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, LinkIcon, { className: "text-icon-primary" }) }),
      rightAdornment: button ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        ActionButton,
        {
          ...button,
          onClick: () => button.onClick({ [name]: value }),
          disabled: button.disabled || value === "" || !isValid
        }
      ) : null,
      children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "input",
        {
          id,
          type: pattern ? "text" : "url",
          placeholder: placeholderWithRequired,
          value,
          onChange: extendedChange,
          ...validationProps,
          required: button ? true : required,
          disabled
        }
      )
    }
  );
};

// src/ui/layouts/presets.ts
var themeClassMap = {
  default: "dial-light",
  "x-dark": "x-dark",
  "x-light": "x-light",
  custom: "custom"
};

// src/ui/layouts/BaseBlinkLayout.tsx

var Linkable = ({
  url,
  className,
  children
}) => url ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
  "a",
  {
    href: url,
    target: "_blank",
    rel: "noopener noreferrer",
    className,
    children
  }
) : /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className, children });
var NotSupportedBlock = ({
  message,
  className
}) => {
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className, children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    "div",
    {
      className: _clsx2.default.call(void 0, 
        "bg-bg-secondary text-subtext text-text-secondary rounded-xl border border-none p-3"
      ),
      children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "flex flex-row gap-2", children: [
        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ConfigIcon, { className: "text-icon-primary" }) }),
        /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "flex flex-col justify-center gap-[3px]", children: [
          /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "a", { className: "font-semibold", children: "This action is not supported" }),
          /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "p", { children: message })
        ] })
      ] })
    }
  ) });
};
var DisclaimerBlock = ({
  type,
  hidden,
  ignorable,
  onSkip,
  className
}) => {
  if (type === _blinkscore.DisclaimerType.BLOCKED && !hidden) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className, children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, Snackbar, { variant: "error", children: [
      /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "p", { children: [
        "This Action or it's origin has been flagged as an unsafe action, & has been blocked. If you believe this action has been blocked in error, please",
        " ",
        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          "a",
          {
            href: "https://discord.gg/saydialect",
            className: "cursor-pointer underline",
            target: "_blank",
            rel: "noopener noreferrer",
            children: "submit an issue"
          }
        ),
        ".",
        !ignorable && " Your action provider blocks execution of this action."
      ] }),
      ignorable && onSkip && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "button",
        {
          className: "hover:text-text-error-hover mt-3 font-semibold transition-colors motion-reduce:transition-none",
          onClick: onSkip,
          children: "Ignore warning & proceed"
        }
      )
    ] }) });
  }
  if (type === _blinkscore.DisclaimerType.UNKNOWN) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className, children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, Snackbar, { variant: "warning", children: [
      /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "p", { children: [
        "This Action has not yet been registered. Only use it if you trust the source. This Action will not unfurl on X until it is registered.",
        !ignorable && " Your action provider blocks execution of this action."
      ] }),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
        "a",
        {
          className: "hover:text-text-warning-hover mt-3 inline-block font-semibold transition-colors motion-reduce:transition-none",
          href: "https://discord.gg/saydialect",
          target: "_blank",
          rel: "noopener noreferrer",
          children: "Report"
        }
      )
    ] }) });
  }
  return null;
};
var BaseBlinkLayout = ({
  stylePreset = "default",
  title,
  description,
  image,
  websiteUrl,
  websiteText,
  securityState,
  disclaimer,
  buttons,
  inputs,
  form,
  error,
  success,
  supportability,
  id
}) => {
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className: _clsx2.default.call(void 0, "blink", themeClassMap[stylePreset]), children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "border-stroke-primary bg-bg-primary shadow-action w-full cursor-default overflow-hidden rounded-2xl border", children: [
    image && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      Linkable,
      {
        url: websiteUrl,
        className: "block max-h-[100cqw] overflow-y-hidden px-5 pt-5",
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          "img",
          {
            className: _clsx2.default.call(void 0, 
              "aspect-auto w-full rounded-xl object-cover object-center"
            ),
            src: image,
            alt: "action-image"
          }
        )
      }
    ),
    /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "flex flex-col p-5", children: [
      /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "mb-2 flex items-center gap-2", children: [
        websiteUrl && /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
          "a",
          {
            href: websiteUrl,
            target: "_blank",
            className: "text-subtext group inline-flex items-center truncate hover:cursor-pointer",
            rel: "noopener noreferrer",
            children: [
              /* @__PURE__ */ _jsxruntime.jsx.call(void 0, LinkIcon, { className: "text-icon-primary group-hover:text-icon-primary-hover mr-2 transition-colors motion-reduce:transition-none" }),
              /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "text-text-link group-hover:text-text-link-hover transition-colors group-hover:underline motion-reduce:transition-none", children: _nullishCoalesce(websiteText, () => ( websiteUrl)) })
            ]
          }
        ),
        websiteText && !websiteUrl && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "text-subtext text-text-link inline-flex items-center truncate", children: websiteText }),
        /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
          "a",
          {
            href: "https://docs.dialect.to/documentation/actions/security",
            target: "_blank",
            rel: "noopener noreferrer",
            className: "flex items-center",
            children: [
              securityState === "malicious" && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
                Badge,
                {
                  variant: "error",
                  icon: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ExclamationShieldIcon, { width: 13, height: 13 }),
                  children: "Blocked"
                }
              ),
              securityState === "trusted" && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
                Badge,
                {
                  variant: "default",
                  icon: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, InfoShieldIcon, { width: 13, height: 13 })
                }
              ),
              securityState === "unknown" && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
                Badge,
                {
                  variant: "warning",
                  icon: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, InfoShieldIcon, { width: 13, height: 13 })
                }
              )
            ]
          }
        )
      ] }),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "text-text text-text-primary mb-0.5 font-semibold", children: title }),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "text-subtext text-text-secondary mb-4 whitespace-pre-wrap", children: description }),
      !supportability.isSupported ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, NotSupportedBlock, { message: supportability.message }) : /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, { children: [
        disclaimer && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          DisclaimerBlock,
          {
            className: "mb-4",
            type: disclaimer.type,
            ignorable: disclaimer.ignorable,
            hidden: disclaimer.type === _blinkscore.DisclaimerType.BLOCKED ? disclaimer.hidden : false,
            onSkip: disclaimer.type === _blinkscore.DisclaimerType.BLOCKED ? disclaimer.onSkip : void 0
          }
        ),
        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
          ActionContent,
          {
            form,
            inputs,
            buttons
          },
          id
        ),
        success && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "text-subtext text-text-success mt-1.5 flex justify-center", children: success }),
        error && !success && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "text-subtext text-text-error mt-1.5 flex justify-center", children: error })
      ] })
    ] })
  ] }) });
};
var ActionContent = ({
  form,
  inputs,
  buttons
}) => {
  if (form) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionForm, { form });
  }
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "flex flex-col gap-3", children: [
    buttons && buttons.length > 0 && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", { className: "flex flex-wrap items-center gap-2", children: _optionalChain([buttons, 'optionalAccess', _53 => _53.map, 'call', _54 => _54((it, index) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      "div",
      {
        className: "flex flex-grow basis-[calc(33.333%-2*4px)]",
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionButton, { ...it })
      },
      index
    ))]) }),
    _optionalChain([inputs, 'optionalAccess', _55 => _55.map, 'call', _56 => _56((input) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionInputFactory, { ...input }, input.name))])
  ] });
};
var buildDefaultFormValues = (inputs) => {
  return Object.fromEntries(
    inputs.map((i) => {
      if (i.type === "checkbox") {
        return [
          i.name,
          _optionalChain([i, 'access', _57 => _57.options, 'optionalAccess', _58 => _58.filter, 'call', _59 => _59((o) => o.selected), 'access', _60 => _60.map, 'call', _61 => _61((o) => o.value)])
        ];
      }
      return i.type === "radio" || i.type === "select" ? [i.name, _optionalChain([i, 'access', _62 => _62.options, 'optionalAccess', _63 => _63.find, 'call', _64 => _64((o) => o.selected), 'optionalAccess', _65 => _65.value])] : null;
    }).filter((i) => !!i)
  );
};
var ActionForm = ({ form }) => {
  const [values, setValues] = _react.useState.call(void 0, 
    buildDefaultFormValues(form.inputs)
  );
  const [validity, setValidity] = _react.useState.call(void 0, 
    Object.fromEntries(form.inputs.map((i) => [i.name, false]))
  );
  const onChange = (name, value) => {
    setValues((prev) => ({ ...prev, [name]: value }));
  };
  const onValidityChange = (name, state) => {
    setValidity((prev) => ({ ...prev, [name]: state }));
  };
  const disabled = Object.values(validity).some((v) => !v);
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: "flex flex-col gap-3", children: [
    form.inputs.map((input) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      ActionInputFactory,
      {
        ...input,
        onChange: (v) => onChange(input.name, v),
        onValidityChange: (v) => onValidityChange(input.name, v)
      },
      input.name
    )),
    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
      ActionButton,
      {
        ...form.button,
        onClick: () => form.button.onClick(values),
        disabled: form.button.disabled || disabled
      }
    )
  ] });
};
var ActionInputFactory = (input) => {
  switch (input.type) {
    case "checkbox":
      return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionCheckboxGroup, { ...input });
    case "radio":
      return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionRadioGroup, { ...input });
    case "date":
    case "datetime-local":
      return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionDateInput, { ...input, type: input.type });
    case "select":
      return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionSelect, { ...input });
    case "email":
      return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionEmailInput, { ...input });
    case "number":
      return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionNumberInput, { ...input });
    case "url":
      return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionUrlInput, { ...input });
    case "textarea":
      return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionTextArea, { ...input });
    default:
      return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionTextInput, { ...input });
  }
};

// src/ui/Blink.tsx

var Blink = ({
  _Layout: Layout = NormalizedBaseBlinkLayout,
  stylePreset,
  ...props
}) => {
  const LayoutWithPreset = _react.useCallback.call(void 0, 
    (props2) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Layout, { ...props2, stylePreset }),
    [Layout, stylePreset]
  );
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    _blinkscore.BlinkContainer,
    {
      ...props,
      selector: void 0,
      Layout: LayoutWithPreset
    }
  );
};
var NormalizedBaseBlinkLayout = (props) => {
  const normalizedProps = useLayoutPropNormalizer(props);
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, BaseBlinkLayout, { ...normalizedProps });
};

// src/ui/MiniBlink.tsx





// src/ui/internal/hooks/useIsolatedLayoutPropNormalizer.ts









var SOFT_LIMIT_FORM_INPUTS2 = 10;
var useIsolatedLayoutPropNormalizer = ({
  executeFn,
  executionStatus,
  executingAction,
  action,
  component,
  caption,
  ...props
}) => {
  const asButtonProps = _react.useCallback.call(void 0, 
    (it) => {
      return {
        text: _nullishCoalesce(buttonLabelMap[executionStatus], () => ( it.label)),
        loading: executionStatus === "executing" && it === executingAction,
        disabled: action.disabled || action.type === "completed" || executionStatus !== "idle",
        variant: buttonVariantMap[action.type === "completed" ? "success" : executionStatus],
        ctaType: it.type === "external-link" && (executionStatus === "idle" || executionStatus === "blocked") ? "link" : "button",
        onClick: async (params) => {
          const extra = await executeFn(_nullishCoalesce(it.parentComponent, () => ( it)), params);
          if (!extra) {
            return;
          }
          if (extra.type === "external-link") {
            const result = window.confirm(
              `This action redirects to another website: ${extra.data.externalLink}, the link will open in a new tab of your browser`
            );
            if (result) {
              window.open(
                extra.data.externalLink,
                "_blank",
                "norefferer,noopener"
              );
              return extra.onNext();
            }
            return _optionalChain([extra, 'access', _66 => _66.onCancel, 'optionalCall', _67 => _67()]);
          }
        }
      };
    },
    [action.disabled, action.type, executeFn, executingAction, executionStatus]
  );
  const asInputProps = _react.useCallback.call(void 0, 
    (it, { placement } = {
      placement: "standalone"
    }) => {
      return {
        type: _nullishCoalesce(it.parameter.type, () => ( "text")),
        placeholder: it.parameter.label,
        disabled: action.disabled || action.type === "completed" || executionStatus !== "idle",
        name: it.parameter.name,
        required: it.parameter.required,
        min: it.parameter.min,
        max: it.parameter.max,
        pattern: it instanceof _blinkscore.SingleValueActionComponent && _blinkscore.isPatternAllowed.call(void 0, it.parameter) ? it.parameter.pattern : void 0,
        options: _blinkscore.isParameterSelectable.call(void 0, it.parameter) ? it.parameter.options : void 0,
        description: it.parameter.patternDescription,
        button: placement === "standalone" ? asButtonProps(it.toButtonActionComponent()) : void 0
      };
    },
    [action.disabled, action.type, asButtonProps, executionStatus]
  );
  const asFormProps = _react.useCallback.call(void 0, 
    (it) => {
      return {
        button: asButtonProps(it.toButtonActionComponent()),
        inputs: it.parameters.toSpliced(SOFT_LIMIT_FORM_INPUTS2).map(
          (parameter) => asInputProps(it.toInputActionComponent(parameter.name), {
            placement: "form"
          })
        )
      };
    },
    [asButtonProps, asInputProps]
  );
  const elementProps = _react.useMemo.call(void 0, () => {
    if (!component) {
      return null;
    }
    if (component instanceof _blinkscore.SingleValueActionComponent || component instanceof _blinkscore.MultiValueActionComponent) {
      return {
        elementType: "input",
        element: asInputProps(component)
      };
    }
    if (component instanceof _blinkscore.FormActionComponent) {
      return { elementType: "form", element: asFormProps(component) };
    }
    if (component instanceof _blinkscore.ButtonActionComponent) {
      return {
        elementType: "button",
        element: asButtonProps(component)
      };
    }
    return null;
  }, [asButtonProps, asFormProps, asInputProps, component]);
  const normalizedCaption = _react.useMemo.call(void 0, () => {
    if (!caption) {
      return {};
    }
    if (caption.type === "success") {
      return {
        success: caption.text
      };
    }
    if (caption.type === "error") {
      return {
        error: caption.text
      };
    }
    return {};
  }, [caption]);
  if (!elementProps) {
    return null;
  }
  return {
    ...props,
    ...elementProps,
    ...normalizedCaption
  };
};

// src/ui/layouts/IsolatedBlinkLayout.tsx



var IsolatedBlinkLayout = ({
  stylePreset = "default",
  id,
  success,
  error,
  ...props
}) => {
  const element = _react.useMemo.call(void 0, () => {
    if (props.elementType === "form") {
      return { form: props.element };
    }
    if (props.elementType === "button") {
      return { buttons: [props.element] };
    }
    if (props.elementType === "input") {
      return { inputs: [props.element] };
    }
    return {};
  }, [props.element, props.elementType]);
  return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", { className: _clsx2.default.call(void 0, "blink w-full", themeClassMap[stylePreset]), children: [
    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ActionContent, { ...element }, id),
    success && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "text-subtext text-text-success mt-1.5 flex justify-center", children: success }),
    error && !success && /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", { className: "text-subtext text-text-error mt-1.5 flex justify-center", children: error })
  ] });
};

// src/ui/MiniBlink.tsx

var MiniBlink = ({
  _Layout: Layout = NormalizedIsolatedBlinkLayout,
  stylePreset,
  ...props
}) => {
  const LayoutWithPreset = _react.useCallback.call(void 0, 
    (props2) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Layout, { ...props2, stylePreset }),
    [Layout, stylePreset]
  );
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _blinkscore.BlinkContainer, { ...props, securityLevel: "all", Layout: LayoutWithPreset });
};
var NormalizedIsolatedBlinkLayout = (props) => {
  const normalizedProps = useIsolatedLayoutPropNormalizer(props);
  if (!normalizedProps) {
    console.warn(
      "[@dialectlabs/blinks] No `selector` prop provided for MiniBlink"
    );
    return null;
  }
  return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, IsolatedBlinkLayout, { ...normalizedProps });
};






exports.Blink = Blink; exports.NormalizedBaseBlinkLayout = NormalizedBaseBlinkLayout; exports.MiniBlink = MiniBlink; exports.NormalizedIsolatedBlinkLayout = NormalizedIsolatedBlinkLayout;
